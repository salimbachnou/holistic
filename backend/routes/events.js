const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');
const { isAuthenticated, isProfessional, isAdmin } = require('../middleware/auth');
const Event = require('../models/Event');
const User = require('../models/User');

// Ajouter un avis sur un √©v√©nement
router.post('/:id/reviews', isAuthenticated, async (req, res) => {
  try {
    const event = await Event.findById(req.params.id);
    
    if (!event) {
      return res.status(404).json({ message: '√âv√©nement non trouv√©' });
    }

    // V√©rifier si l'utilisateur a particip√© √† l'√©v√©nement
    const hasParticipated = event.participants.some(
      p => p.user.toString() === req.user._id.toString() && p.status === 'confirmed'
    );

    if (!hasParticipated) {
      return res.status(403).json({ message: 'Vous devez avoir particip√© √† l\'√©v√©nement pour laisser un avis' });
    }

    // V√©rifier si l'utilisateur a d√©j√† laiss√© un avis
    const hasReviewed = event.reviews.some(
      review => review.user.toString() === req.user._id.toString()
    );

    if (hasReviewed) {
      return res.status(400).json({ message: 'Vous avez d√©j√† laiss√© un avis pour cet √©v√©nement' });
    }

    const { rating, comment } = req.body;

    if (!rating || rating < 1 || rating > 5) {
      return res.status(400).json({ message: 'La note doit √™tre comprise entre 1 et 5' });
    }

    // Ajouter l'avis
    event.reviews.push({
      user: req.user._id,
      rating,
      comment
    });

    // Mettre √† jour les statistiques
    event.updateReviewStats();
    await event.save();

    res.json({ message: 'Avis ajout√© avec succ√®s', event });
  } catch (error) {
    console.error('Error adding review:', error);
    res.status(500).json({ message: 'Erreur lors de l\'ajout de l\'avis' });
  }
});

// Modifier son avis
router.put('/:eventId/reviews/:reviewId', isAuthenticated, async (req, res) => {
  try {
    const event = await Event.findById(req.params.eventId);
    
    if (!event) {
      return res.status(404).json({ message: '√âv√©nement non trouv√©' });
    }

    const review = event.reviews.id(req.params.reviewId);
    
    if (!review) {
      return res.status(404).json({ message: 'Avis non trouv√©' });
    }

    if (review.user.toString() !== req.user._id.toString()) {
      return res.status(403).json({ message: 'Non autoris√© √† modifier cet avis' });
    }

    const { rating, comment } = req.body;

    if (rating) {
      if (rating < 1 || rating > 5) {
        return res.status(400).json({ message: 'La note doit √™tre comprise entre 1 et 5' });
      }
      review.rating = rating;
    }

    if (comment !== undefined) {
      review.comment = comment;
    }

    // Mettre √† jour les statistiques
    event.updateReviewStats();
    await event.save();

    res.json({ message: 'Avis modifi√© avec succ√®s', event });
  } catch (error) {
    console.error('Error updating review:', error);
    res.status(500).json({ message: 'Erreur lors de la modification de l\'avis' });
  }
});

// Supprimer son avis
router.delete('/:eventId/reviews/:reviewId', isAuthenticated, async (req, res) => {
  try {
    const event = await Event.findById(req.params.eventId);
    
    if (!event) {
      return res.status(404).json({ message: '√âv√©nement non trouv√©' });
    }

    const review = event.reviews.id(req.params.reviewId);
    
    if (!review) {
      return res.status(404).json({ message: 'Avis non trouv√©' });
    }

    if (review.user.toString() !== req.user._id.toString()) {
      return res.status(403).json({ message: 'Non autoris√© √† supprimer cet avis' });
    }

    review.remove();
    
    // Mettre √† jour les statistiques
    event.updateReviewStats();
    await event.save();

    res.json({ message: 'Avis supprim√© avec succ√®s' });
  } catch (error) {
    console.error('Error deleting review:', error);
    res.status(500).json({ message: 'Erreur lors de la suppression de l\'avis' });
  }
});

// Mettre √† jour le calcul des statistiques pour inclure la satisfaction
router.get('/stats', async (req, res) => {
  try {
    // Nombre total d'√©v√©nements approuv√©s
    const totalEvents = await Event.countDocuments({ status: 'approved' });

    // Nombre total de participants (statut confirm√©)
    const events = await Event.find({ status: 'approved' });
    let totalParticipants = 0;
    let totalRating = 0;
    let totalReviews = 0;

    events.forEach(event => {
      // Compter les participants confirm√©s (en tenant compte des quantit√©s)
      totalParticipants += event.participants
        .filter(p => p.status === 'confirmed')
        .reduce((total, p) => total + (p.quantity || 1), 0);
      
      // Calculer la moyenne des notes
      if (event.stats.totalReviews > 0) {
        totalRating += event.stats.averageRating * event.stats.totalReviews;
        totalReviews += event.stats.totalReviews;
      }
    });

    // Calculer la satisfaction moyenne globale
    const satisfaction = totalReviews > 0 
      ? Number((totalRating / totalReviews).toFixed(1))
      : 0;

    // Calcul de la croissance
    const today = new Date();
    const lastMonth = new Date(today.getFullYear(), today.getMonth() - 1, 1);
    
    const currentMonthEvents = await Event.countDocuments({
      status: 'approved',
      createdAt: { $gte: new Date(today.getFullYear(), today.getMonth(), 1) }
    });

    const lastMonthEvents = await Event.countDocuments({
      status: 'approved',
      createdAt: { 
        $gte: lastMonth,
        $lt: new Date(today.getFullYear(), today.getMonth(), 1)
      }
    });

    const growth = lastMonthEvents === 0 ? 100 : 
      Math.round(((currentMonthEvents - lastMonthEvents) / lastMonthEvents) * 100);

    res.json({
      stats: {
        totalEvents,
        totalParticipants,
        satisfaction,
        totalReviews,
        growth: `${growth > 0 ? '+' : ''}${growth}%`
      }
    });
  } catch (error) {
    console.error('Error fetching event stats:', error);
    res.status(500).json({ message: 'Erreur lors de la r√©cup√©ration des statistiques' });
  }
});

// R√©cup√©rer tous les √©v√©nements publics (approuv√©s)
router.get('/', async (req, res) => {
  try {
    const events = await Event.find({ status: 'approved' })
      .populate({
        path: 'professional',
        select: 'firstName lastName profileImage isVerified isActive'
      })
      .sort({ date: 1 });
    
    // Filter out events with unverified or inactive professionals
    const filteredEvents = events.filter(event => 
      event.professional && 
      event.professional.isVerified && 
      event.professional.isActive
    );
    
    res.json({ events: filteredEvents });
  } catch (error) {
    console.error('Error fetching events:', error);
    res.status(500).json({ message: 'Erreur lors de la r√©cup√©ration des √©v√©nements' });
  }
});

// R√©cup√©rer les √©v√©nements d'un professionnel (doit √™tre avant /:id)
router.get('/professional', isAuthenticated, isProfessional, async (req, res) => {
  try {
    const events = await Event.find({ professional: req.user._id })
      .populate('participants.user', 'firstName lastName email profileImage')
      .sort({ date: -1 });
    
    res.json({ events });
  } catch (error) {
    console.error('Error fetching professional events:', error);
    res.status(500).json({ message: 'Erreur lors de la r√©cup√©ration des √©v√©nements' });
  }
});

// R√©cup√©rer les √©v√©nements auxquels l'utilisateur s'est inscrit (doit √™tre avant /:id)
router.get('/my-events', isAuthenticated, async (req, res) => {
  try {
    console.log('üîç [MY-EVENTS] Fetching events for user:', req.user._id);
    
    const events = await Event.find({
      'participants.user': req.user._id,
      status: 'approved'
    })
      .populate('professional', 'firstName lastName profileImage businessName')
      .sort({ date: -1 });
    
    // Filtrer pour r√©cup√©rer seulement les √©v√©nements o√π l'utilisateur est participant
    const userEvents = events.map(event => {
      const userParticipation = event.participants.find(
        p => p.user.toString() === req.user._id.toString()
      );
      
      return {
        ...event.toObject(),
        userParticipation: userParticipation
      };
    });
    
    console.log('‚úÖ [MY-EVENTS] Found events:', userEvents.length);
    res.json({ events: userEvents });
  } catch (error) {
    console.error('‚ùå [MY-EVENTS] Error fetching user events:', error);
    res.status(500).json({ message: 'Erreur lors de la r√©cup√©ration de vos √©v√©nements' });
  }
});

// R√©cup√©rer les participants d'un √©v√©nement (doit √™tre avant /:id)
router.get('/:id/participants', isAuthenticated, isProfessional, async (req, res) => {
  try {
    console.log('üîç [PARTICIPANTS] Fetching participants for event:', req.params.id);
    console.log('üîç [PARTICIPANTS] Route matched: /:id/participants');
    
    const event = await Event.findById(req.params.id)
      .populate('participants.user', 'firstName lastName email profileImage phone');
    
    if (!event) {
      console.log('‚ùå [PARTICIPANTS] Event not found:', req.params.id);
      return res.status(404).json({ message: '√âv√©nement non trouv√©' });
    }
    
    console.log('‚úÖ [PARTICIPANTS] Event found, professional:', event.professional);
    console.log('‚úÖ [PARTICIPANTS] Current user:', req.user._id);
    
    // V√©rifier que l'√©v√©nement appartient au professionnel
    if (event.professional.toString() !== req.user._id.toString()) {
      console.log('‚ùå [PARTICIPANTS] Access denied - not the owner');
      return res.status(403).json({ message: 'Non autoris√© √† voir les participants de cet √©v√©nement' });
    }
    
    console.log('‚úÖ [PARTICIPANTS] Returning participants:', event.participants.length);
    res.json({ participants: event.participants });
  } catch (error) {
    console.error('‚ùå [PARTICIPANTS] Error fetching event participants:', error);
    res.status(500).json({ message: 'Erreur lors de la r√©cup√©ration des participants' });
  }
});

// Mettre √† jour le statut d'un participant (doit √™tre avant /:id)
router.put('/:eventId/participants/:participantId', isAuthenticated, isProfessional, async (req, res) => {
  try {
    const { eventId, participantId } = req.params;
    const { status, reason } = req.body;
    
    console.log('Updating participant status:', { eventId, participantId, status });
    
    const event = await Event.findById(eventId)
      .populate('participants.user', 'firstName lastName email');
    
    if (!event) {
      return res.status(404).json({ message: '√âv√©nement non trouv√©' });
    }
    
    // V√©rifier que l'√©v√©nement appartient au professionnel
    if (event.professional.toString() !== req.user._id.toString()) {
      return res.status(403).json({ message: 'Non autoris√© √† modifier les participants de cet √©v√©nement' });
    }
    
    // Trouver le participant
    const participantIndex = event.participants.findIndex(
      p => p._id.toString() === participantId
    );
    
    if (participantIndex === -1) {
      return res.status(404).json({ message: 'Participant non trouv√©' });
    }
    
    // Mettre √† jour le statut
    event.participants[participantIndex].status = status;
    
    if (status === 'cancelled' && reason) {
      event.participants[participantIndex].cancellationReason = reason;
    }
    
    await event.save();
    
    // Envoyer une notification au participant
    try {
      const NotificationService = require('../services/notificationService');
      const participant = event.participants[participantIndex];
      const quantityText = participant.quantity > 1 ? `${participant.quantity} places` : '1 place';
      
      if (status === 'confirmed') {
        await NotificationService.createClientNotification(
          participant.user._id,
          'Inscription confirm√©e',
          `Votre inscription √† l'√©v√©nement "${event.title}" pour ${quantityText} a √©t√© confirm√©e !`,
          'event_confirmed',
          `/events/${event._id}`,
          {
            eventId: event._id,
            eventTitle: event.title,
            eventDate: event.date,
            quantity: participant.quantity
          }
        );
      } else if (status === 'cancelled') {
        await NotificationService.createClientNotification(
          participant.user._id,
          'Inscription refus√©e',
          `Votre inscription √† l'√©v√©nement "${event.title}" pour ${quantityText} a √©t√© refus√©e.${reason ? ` Raison: ${reason}` : ''}`,
          'event_cancelled',
          `/events/${event._id}`,
          {
            eventId: event._id,
            eventTitle: event.title,
            reason: reason || 'Aucune raison sp√©cifi√©e',
            quantity: participant.quantity
          }
        );
      }
    } catch (notificationError) {
      console.error('Erreur lors de l\'envoi de la notification:', notificationError);
    }
    
    console.log('Participant status updated successfully');
    res.json({ 
      message: `Statut du participant mis √† jour: ${status}`,
      participant: event.participants[participantIndex]
    });
    
  } catch (error) {
    console.error('Error updating participant status:', error);
    res.status(500).json({ message: 'Erreur lors de la mise √† jour du statut du participant' });
  }
});

// R√©cup√©rer un √©v√©nement par son ID
router.get('/:id', async (req, res) => {
  try {
    console.log('üîç [EVENT] Fetching event by ID:', req.params.id);
    console.log('üîç [EVENT] Route matched: /:id');
    
    const event = await Event.findById(req.params.id)
      .populate({
        path: 'professional',
        select: 'firstName lastName profileImage businessName bio specialties email'
      })
      .populate('participants.user', 'firstName lastName profileImage');
    

    
    if (!event) {
      console.log('‚ùå [EVENT] Event not found:', req.params.id);
      return res.status(404).json({ message: '√âv√©nement non trouv√©' });
    }
    
    console.log('‚úÖ [EVENT] Event found:', event.title);
    res.json({ event });
  } catch (error) {
    console.error('‚ùå [EVENT] Error fetching event:', error);
    res.status(500).json({ message: 'Erreur lors de la r√©cup√©ration de l\'√©v√©nement' });
  }
});

// Cr√©er un nouvel √©v√©nement
router.post('/', isAuthenticated, isProfessional, async (req, res) => {
  try {
    const {
      title,
      description,
      date,
      endDate,
      address,
      locationCoordinates,
      price,
      currency,
      maxParticipants,
      bookingType,
      coverImages,
    } = req.body;

    // Validation
    if (new Date(date) > new Date(endDate)) {
      return res.status(400).json({ message: 'La date de fin doit √™tre apr√®s la date de d√©but' });
    }

    const newEvent = new Event({
      title,
      description,
      date,
      endDate,
      address,
      locationCoordinates,
      price,
      currency: currency || 'MAD',
      maxParticipants,
      bookingType,
      coverImages: coverImages || [],
      professional: req.user._id,
    });

    await newEvent.save();
    
    // D√©clencher la notification pour le professionnel (confirmation de cr√©ation)
    try {
      const NotificationService = require('../services/notificationService');
      const Professional = require('../models/Professional');
      const professional = await Professional.findOne({ userId: req.user._id });
      if (professional) {
        await NotificationService.notifyNewEvent(newEvent, professional._id);
      }
    } catch (error) {
      console.error('Erreur lors de la notification de nouvel √©v√©nement:', error);
    }
    
    res.status(201).json({ message: '√âv√©nement cr√©√© avec succ√®s', event: newEvent });
  } catch (error) {
    console.error('Error creating event:', error);
    res.status(500).json({ message: 'Erreur lors de la cr√©ation de l\'√©v√©nement' });
  }
});

// Mettre √† jour un √©v√©nement
router.put('/:id', isAuthenticated, isProfessional, async (req, res) => {
  try {
    const event = await Event.findById(req.params.id);
    
    if (!event) {
      return res.status(404).json({ message: '√âv√©nement non trouv√©' });
    }
    
    // V√©rifier que l'√©v√©nement appartient au professionnel
    if (event.professional.toString() !== req.user._id.toString()) {
      return res.status(403).json({ message: 'Non autoris√© √† modifier cet √©v√©nement' });
    }
    
    const {
      title,
      description,
      date,
      endDate,
      address,
      locationCoordinates,
      price,
      currency,
      maxParticipants,
      bookingType,
      coverImages,
    } = req.body;

    // Validation
    if (new Date(date) > new Date(endDate)) {
      return res.status(400).json({ message: 'La date de fin doit √™tre apr√®s la date de d√©but' });
    }

    // Mettre √† jour l'√©v√©nement
    event.title = title;
    event.description = description;
    event.date = date;
    event.endDate = endDate;
    event.address = address;
    event.locationCoordinates = locationCoordinates;
    event.price = price;
    event.currency = currency || 'MAD';
    event.maxParticipants = maxParticipants;
    event.bookingType = bookingType;
    
    // Ne mettre √† jour les images que si elles sont fournies
    if (coverImages) {
      event.coverImages = coverImages;
    }
    
    // V√©rifier si l'√©v√©nement √©tait d√©j√† approuv√© pour notifier les participants
    const wasApproved = event.status === 'approved';
    
    // Si l'√©v√©nement √©tait d√©j√† approuv√©, le passer en attente de mod√©ration
    if (wasApproved) {
      event.status = 'pending';
    }

    await event.save();
    
    // Notifier les participants si l'√©v√©nement √©tait approuv√© et passe en attente
    if (wasApproved && event.participants && event.participants.length > 0) {
      try {
        console.log('üîî [UPDATE] √âv√©nement √©tait approuv√©, envoi des notifications...');
        const NotificationService = require('../services/notificationService');
        
        // Notifier tous les participants actifs (non annul√©s)
        const activeParticipants = event.participants.filter(p => p.status !== 'cancelled');
        console.log(`üîî [UPDATE] ${activeParticipants.length} participants actifs trouv√©s:`, activeParticipants.map(p => ({
          userId: p.user.toString(),
          status: p.status
        })));
        
        for (const participant of activeParticipants) {
          console.log(`üîî [UPDATE] Envoi notification √† l'utilisateur: ${participant.user}`);
          const result = await NotificationService.createClientNotification(
            participant.user,
            '√âv√©nement modifi√©',
            `L'√©v√©nement "${event.title}" a √©t√© modifi√© par l'organisateur. Il est maintenant en attente de validation.`,
            'event_updated',
            `/events/${event._id}`,
            {
              eventId: event._id,
              eventTitle: event.title,
              eventDate: event.date,
              changes: '√âv√©nement modifi√© - en attente de validation'
            }
          );
          console.log(`üîî [UPDATE] R√©sultat notification pour ${participant.user}:`, result ? 'Succ√®s' : '√âchec');
        }
        
        console.log(`‚úÖ [UPDATE] Notifications envoy√©es √† ${activeParticipants.length} participants pour l'√©v√©nement modifi√©: ${event.title}`);
      } catch (notificationError) {
        console.error('‚ùå [UPDATE] Erreur lors de l\'envoi des notifications de modification:', notificationError);
      }
    } else {
      console.log('üîî [UPDATE] Conditions non remplies pour l\'envoi de notifications:', {
        wasApproved,
        hasParticipants: event.participants && event.participants.length > 0,
        participantsCount: event.participants ? event.participants.length : 0
      });
    }
    
    res.json({ message: '√âv√©nement mis √† jour avec succ√®s', event });
  } catch (error) {
    console.error('Error updating event:', error);
    res.status(500).json({ message: 'Erreur lors de la mise √† jour de l\'√©v√©nement' });
  }
});

// Supprimer un √©v√©nement
router.delete('/:id', isAuthenticated, isProfessional, async (req, res) => {
  try {
    const event = await Event.findById(req.params.id);
    
    if (!event) {
      return res.status(404).json({ message: '√âv√©nement non trouv√©' });
    }
    
    // V√©rifier que l'√©v√©nement appartient au professionnel
    if (event.professional.toString() !== req.user._id.toString()) {
      return res.status(403).json({ message: 'Non autoris√© √† supprimer cet √©v√©nement' });
    }
    
    await Event.findByIdAndDelete(req.params.id);
    
    res.json({ message: '√âv√©nement supprim√© avec succ√®s' });
  } catch (error) {
    console.error('Error deleting event:', error);
    res.status(500).json({ message: 'Erreur lors de la suppression de l\'√©v√©nement' });
  }
});

// S'inscrire √† un √©v√©nement
router.post('/:id/register', isAuthenticated, async (req, res) => {
  try {
    const { quantity = 1, note = '' } = req.body;
    
    console.log('üîç [REGISTER] Event registration request:', {
      eventId: req.params.id,
      userId: req.user._id,
      userEmail: req.user.email,
      quantity: quantity,
      note: note
    });
    
    const event = await Event.findById(req.params.id);
    
    if (!event) {
      console.log('‚ùå [REGISTER] Event not found:', req.params.id);
      return res.status(404).json({ message: '√âv√©nement non trouv√©' });
    }
    
    console.log('‚úÖ [REGISTER] Event found:', event.title);
    console.log('üîç [REGISTER] Event participants:', event.participants.map(p => ({
      userId: p.user.toString(),
      status: p.status,
      quantity: p.quantity,
      _id: p._id
    })));
    
    // V√©rifier si l'√©v√©nement est approuv√©
    if (event.status !== 'approved') {
      console.log('‚ùå [REGISTER] Event not approved:', event.status);
      return res.status(400).json({ message: 'Cet √©v√©nement n\'est pas disponible pour inscription' });
    }
    
    // Validation de la quantit√©
    if (quantity < 1) {
      return res.status(400).json({ message: 'La quantit√© doit √™tre d\'au moins 1' });
    }
    
    // V√©rifier si l'utilisateur est d√©j√† inscrit (avec statut non annul√©)
    const existingParticipations = event.participants.filter(p => 
      p.user.toString() === req.user._id.toString()
    );
    
    console.log('üîç [REGISTER] All user participations:', existingParticipations);
    
    const activeParticipation = existingParticipations.find(p => p.status !== 'cancelled');
    
    console.log('üîç [REGISTER] Active participation:', activeParticipation);
    
    if (activeParticipation) {
      console.log('‚ùå [REGISTER] User already has active registration');
      return res.status(400).json({ message: 'Vous √™tes d√©j√† inscrit √† cet √©v√©nement' });
    }
    
    // Trouver la participation annul√©e la plus r√©cente pour la r√©activer
    const cancelledParticipation = existingParticipations
      .filter(p => p.status === 'cancelled')
      .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))[0];
    
    console.log('üîç [REGISTER] Most recent cancelled participation:', cancelledParticipation);
    
    // Calculer le nombre total de places occup√©es (en tenant compte des quantit√©s)
    const totalOccupiedPlaces = event.participants
      .filter(p => p.status !== 'cancelled')
      .reduce((total, p) => total + (p.quantity || 1), 0);
    
    console.log('üîç [REGISTER] Total occupied places:', totalOccupiedPlaces, '/', event.maxParticipants);
    
    // V√©rifier si l'√©v√©nement a assez de places disponibles
    if (totalOccupiedPlaces + quantity > event.maxParticipants) {
      console.log('‚ùå [REGISTER] Event does not have enough places');
      return res.status(400).json({ 
        message: `Il ne reste que ${event.maxParticipants - totalOccupiedPlaces} place(s) disponible(s) pour cet √©v√©nement` 
      });
    }
    
    // Si l'utilisateur a une participation annul√©e, la r√©activer au lieu de cr√©er une nouvelle
    if (cancelledParticipation) {
      console.log('üîÑ [REGISTER] Reactivating cancelled participation');
      // Fetch the Professional by userId (event.professional)
      const Professional = require('../models/Professional');
      const professional = await Professional.findOne({ userId: event.professional });
      const bookingMode = professional?.bookingMode || 'manual';
      cancelledParticipation.status = bookingMode === 'auto' ? 'confirmed' : 'pending';
      cancelledParticipation.quantity = quantity;
      cancelledParticipation.note = note;
      cancelledParticipation.createdAt = new Date();
    } else {
      console.log('‚ûï [REGISTER] Adding new participation');
      // Ajouter l'utilisateur aux participants
      // Fetch the Professional by userId (event.professional)
      const Professional = require('../models/Professional');
      const professional = await Professional.findOne({ userId: event.professional });
      const bookingMode = professional?.bookingMode || 'manual';
      event.participants.push({
        user: req.user._id,
        status: bookingMode === 'auto' ? 'confirmed' : 'pending',
        quantity: quantity,
        note: note
      });
    }
    
    await event.save();
    
    // Envoyer une notification au professionnel
    try {
      console.log('üîî [REGISTER] Sending notification to professional');
      const NotificationService = require('../services/notificationService');
      
      // R√©cup√©rer les informations du client
      const clientName = `${req.user.firstName} ${req.user.lastName}`;
      
      const quantityText = quantity > 1 ? `${quantity} places` : '1 place';
      const noteText = note ? `\nNote: ${note}` : '';
      
      await NotificationService.createClientNotification(
        event.professional,
        'Nouvelle r√©servation d\'√©v√©nement',
        `${clientName} s'est inscrit(e) √† votre √©v√©nement "${event.title}" pour ${quantityText}.${noteText}`,
        'event_booking_request',
        `/dashboard/professional/event-bookings`,
        {
          eventId: event._id,
          eventTitle: event.title,
          eventDate: event.date,
          clientId: req.user._id,
          clientName: clientName,
          clientEmail: req.user.email,
          quantity: quantity,
          note: note
        }
      );
      
      console.log('‚úÖ [REGISTER] Notification sent to professional');
    } catch (notificationError) {
      console.error('‚ùå [REGISTER] Error sending notification:', notificationError);
      // Ne pas faire √©chouer l'inscription si la notification √©choue
    }
    
    console.log('‚úÖ [REGISTER] Registration successful');
    res.json({ message: 'Inscription r√©ussie', event });
  } catch (error) {
    console.error('‚ùå [REGISTER] Error registering for event:', error);
    res.status(500).json({ message: 'Erreur lors de l\'inscription √† l\'√©v√©nement' });
  }
});

// Annuler son inscription √† un √©v√©nement
router.post('/:id/cancel', isAuthenticated, async (req, res) => {
  try {
    const event = await Event.findById(req.params.id);
    
    if (!event) {
      return res.status(404).json({ message: '√âv√©nement non trouv√©' });
    }
    
    // Trouver l'inscription de l'utilisateur
    const participantIndex = event.participants.findIndex(p => 
      p.user.toString() === req.user._id.toString() && p.status !== 'cancelled'
    );
    
    if (participantIndex === -1) {
      return res.status(400).json({ message: 'Vous n\'√™tes pas inscrit √† cet √©v√©nement' });
    }
    
    // Annuler l'inscription
    event.participants[participantIndex].status = 'cancelled';
    
    await event.save();
    
    // Envoyer une notification au professionnel
    try {
      console.log('üîî [CANCEL] Sending cancellation notification to professional');
      const NotificationService = require('../services/notificationService');
      
      // R√©cup√©rer les informations du client
      const clientName = `${req.user.firstName} ${req.user.lastName}`;
      
      await NotificationService.createClientNotification(
        event.professional,
        'Annulation de r√©servation d\'√©v√©nement',
        `${clientName} a annul√© son inscription √† votre √©v√©nement "${event.title}".`,
        'event_booking_cancelled',
        `/dashboard/professional/event-bookings`,
        {
          eventId: event._id,
          eventTitle: event.title,
          eventDate: event.date,
          clientId: req.user._id,
          clientName: clientName,
          clientEmail: req.user.email
        }
      );
      
      console.log('‚úÖ [CANCEL] Cancellation notification sent to professional');
    } catch (notificationError) {
      console.error('‚ùå [CANCEL] Error sending cancellation notification:', notificationError);
      // Ne pas faire √©chouer l'annulation si la notification √©choue
    }
    
    res.json({ message: 'Inscription annul√©e avec succ√®s' });
  } catch (error) {
    console.error('Error cancelling event registration:', error);
    res.status(500).json({ message: 'Erreur lors de l\'annulation de l\'inscription' });
  }
});

// Routes pour les administrateurs

// Approuver/Rejeter un √©v√©nement
router.put('/:id/review', isAuthenticated, isAdmin, async (req, res) => {
  try {
    const { status, reason } = req.body;
    
    if (!['approved', 'rejected'].includes(status)) {
      return res.status(400).json({ message: 'Statut invalide' });
    }
    
    const event = await Event.findById(req.params.id);
    
    if (!event) {
      return res.status(404).json({ message: '√âv√©nement non trouv√©' });
    }
    
    const previousStatus = event.status;
    event.status = status;
    
    if (status === 'rejected' && reason) {
      event.rejectionReason = reason;
    }
    
    await event.save();
    
    // Notifier les participants si l'√©v√©nement est approuv√© apr√®s modification
    if (status === 'approved' && previousStatus === 'pending' && event.participants && event.participants.length > 0) {
      try {
        const NotificationService = require('../services/notificationService');
        
        // Notifier tous les participants actifs (non annul√©s)
        const activeParticipants = event.participants.filter(p => p.status !== 'cancelled');
        
        for (const participant of activeParticipants) {
          await NotificationService.createClientNotification(
            participant.user,
            '√âv√©nement valid√©',
            `L'√©v√©nement "${event.title}" a √©t√© valid√© apr√®s modification. Vous pouvez maintenant consulter les d√©tails mis √† jour.`,
            'event_approved',
            `/events/${event._id}`,
            {
              eventId: event._id,
              eventTitle: event.title,
              eventDate: event.date,
              changes: '√âv√©nement valid√© apr√®s modification'
            }
          );
        }
        
        console.log(`‚úÖ Notifications d'approbation envoy√©es √† ${activeParticipants.length} participants pour l'√©v√©nement: ${event.title}`);
      } catch (notificationError) {
        console.error('Erreur lors de l\'envoi des notifications d\'approbation:', notificationError);
      }
    }
    
    // Notifier les participants si l'√©v√©nement est rejet√©
    if (status === 'rejected' && event.participants && event.participants.length > 0) {
      try {
        const NotificationService = require('../services/notificationService');
        
        // Notifier tous les participants actifs (non annul√©s)
        const activeParticipants = event.participants.filter(p => p.status !== 'cancelled');
        
        for (const participant of activeParticipants) {
          await NotificationService.createClientNotification(
            participant.user,
            '√âv√©nement rejet√©',
            `L'√©v√©nement "${event.title}" a √©t√© rejet√© par l'administration.${reason ? ` Raison: ${reason}` : ''}`,
            'event_rejected',
            `/events/${event._id}`,
            {
              eventId: event._id,
              eventTitle: event.title,
              reason: reason || 'Aucune raison sp√©cifi√©e'
            }
          );
        }
        
        console.log(`‚úÖ Notifications de rejet envoy√©es √† ${activeParticipants.length} participants pour l'√©v√©nement: ${event.title}`);
      } catch (notificationError) {
        console.error('Erreur lors de l\'envoi des notifications de rejet:', notificationError);
      }
    }
    
    res.json({ message: 'Statut de l\'√©v√©nement mis √† jour', event });
  } catch (error) {
    console.error('Error reviewing event:', error);
    res.status(500).json({ message: 'Erreur lors de la r√©vision de l\'√©v√©nement' });
  }
});

module.exports = router; 