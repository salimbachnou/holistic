const mongoose = require('mongoose');
const Session = require('../models/Session');
const Review = require('../models/Review');
const User = require('../models/User');
const Professional = require('../models/Professional');
const Booking = require('../models/Booking');

// Configuration de la base de donn√©es
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb+srv://salimbachnou:sasaSASA13%40%40@cluster0.b01i0ev.mongodb.net/holistic?retryWrites=true&w=majority&appName=Cluster0/holistic';

// Exemples de commentaires pour les reviews
const sampleComments = [
  "Excellente session ! J'ai beaucoup appris et le professionnel √©tait tr√®s comp√©tent.",
  "Session tr√®s enrichissante, je recommande vivement. L'ambiance √©tait parfaite.",
  "Bonne session dans l'ensemble, quelques points √† am√©liorer mais globalement satisfait.",
  "Session exceptionnelle ! D√©pass√© mes attentes. Tr√®s professionnel et √† l'√©coute.",
  "Tr√®s bonne exp√©rience, j'ai pu poser toutes mes questions et obtenir des r√©ponses claires.",
  "Session int√©ressante mais un peu courte √† mon go√ªt. Sinon tr√®s bien organis√©e.",
  "Parfait ! Exactement ce que je cherchais. Je reviendrai certainement.",
  "Session de qualit√© avec des conseils pratiques tr√®s utiles.",
  "Tr√®s satisfait de cette session. Le professionnel ma√Ætrise parfaitement son sujet.",
  "Bonne session, bien structur√©e et interactive. Je recommande."
];

async function createTestSessionsWithReviews() {
  try {
    console.log('üå± Cr√©ation de sessions de test avec reviews...');
    
    // Connexion √† la base de donn√©es
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Connexion √† MongoDB √©tablie');

    // R√©cup√©rer le premier professionnel
    const professional = await Professional.findOne({});
    if (!professional) {
      console.log('‚ùå Aucun professionnel trouv√©');
      return;
    }
    console.log(`üë®‚Äçüíº Professionnel trouv√©: ${professional.businessName}`);

    // R√©cup√©rer tous les utilisateurs clients
    const clients = await User.find({ role: 'client' });
    console.log(`üë• Trouv√© ${clients.length} clients`);

    if (clients.length === 0) {
      console.log('‚ùå Aucun client trouv√©');
      return;
    }

    // Cr√©er des sessions de test (certaines termin√©es, d'autres programm√©es)
    const sessionsToCreate = [
      {
        title: "Session de m√©ditation guid√©e",
        description: "Une session relaxante de m√©ditation pour d√©butants",
        startTime: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // Il y a 2 jours
        duration: 60,
        maxParticipants: 8,
        price: 50,
        category: 'group',
        location: "Centre de bien-√™tre, 123 Rue de la Paix, Casablanca",
        status: 'completed'
      },
      {
        title: "S√©ance de yoga matinal",
        description: "R√©veillez votre corps avec une s√©ance de yoga douce",
        startTime: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000), // Il y a 1 jour
        duration: 90,
        maxParticipants: 10,
        price: 40,
        category: 'group',
        location: "Studio Yoga Zen, 456 Avenue Mohammed V, Rabat",
        status: 'completed'
      },
      {
        title: "Consultation nutritionnelle",
        description: "Bilan nutritionnel personnalis√©",
        startTime: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000), // Il y a 3 jours
        duration: 45,
        maxParticipants: 1,
        price: 80,
        category: 'individual',
        location: "Cabinet de nutrition, 789 Rue Hassan II, F√®s",
        status: 'completed'
      },
      {
        title: "Atelier de respiration",
        description: "Techniques de respiration pour la relaxation",
        startTime: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000), // Il y a 4 jours
        duration: 75,
        maxParticipants: 12,
        price: 35,
        category: 'workshop',
        location: "Salle de conf√©rence, H√¥tel Atlas, Marrakech",
        status: 'completed'
      },
      {
        title: "Session de th√©rapie holistique",
        description: "Approche globale du bien-√™tre",
        startTime: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000), // Il y a 5 jours
        duration: 90,
        maxParticipants: 6,
        price: 100,
        category: 'group',
        location: "Centre holistique Harmonie, 321 Boulevard Zerktouni, Casablanca",
        status: 'completed'
      },
      {
        title: "Session en ligne de m√©ditation",
        description: "Session de m√©ditation avanc√©e en ligne",
        startTime: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000), // Dans 2 jours
        duration: 60,
        maxParticipants: 8,
        price: 55,
        category: 'online',
        meetingLink: "https://zoom.us/j/123456789",
        status: 'scheduled'
      }
    ];

    let sessionsCreated = 0;
    let reviewsCreated = 0;

    // Cr√©er les sessions
    for (const sessionData of sessionsToCreate) {
      const session = new Session({
        ...sessionData,
        professionalId: professional._id
      });
      await session.save();
      sessionsCreated++;
      console.log(`‚úÖ Session cr√©√©e: ${session.title} (${session.status})`);

      // Si la session est termin√©e, ajouter des reviews
      if (session.status === 'completed') {
        // G√©n√©rer entre 2 et 5 reviews par session
        const numberOfReviews = Math.floor(Math.random() * 4) + 2;
        console.log(`   üìù G√©n√©ration de ${numberOfReviews} reviews`);

        // M√©langer les clients et prendre les premiers
        const shuffledClients = clients.sort(() => 0.5 - Math.random());
        const selectedClients = shuffledClients.slice(0, numberOfReviews);

        for (const client of selectedClients) {
          try {
            // Cr√©er une r√©servation confirm√©e pour ce client
            const booking = new Booking({
              client: client._id,
              professional: professional._id,
              service: {
                type: 'session',
                sessionId: session._id,
                title: session.title,
                date: session.startTime,
                duration: session.duration,
                price: session.price
              },
              status: 'completed',
              totalAmount: session.price,
              paymentStatus: 'completed',
              createdAt: new Date(session.startTime.getTime() - Math.random() * 7 * 24 * 60 * 60 * 1000)
            });
            await booking.save();

            // G√©n√©rer une note al√©atoire (biais√©e vers les bonnes notes)
            const ratings = [3, 4, 4, 4, 5, 5, 5, 5]; // Plus de 4 et 5 √©toiles
            const rating = ratings[Math.floor(Math.random() * ratings.length)];

            // Choisir un commentaire al√©atoire
            const comment = sampleComments[Math.floor(Math.random() * sampleComments.length)];

            // Cr√©er la review
            const review = new Review({
              clientId: client._id,
              professionalId: professional._id,
              contentId: session._id,
              contentType: 'session',
              contentTitle: session.title,
              rating: rating,
              comment: comment,
              status: 'approved',
              createdAt: new Date(session.startTime.getTime() + Math.random() * 7 * 24 * 60 * 60 * 1000)
            });

            await review.save();
            reviewsCreated++;

            console.log(`   ‚úÖ Review cr√©√©e: ${client.firstName} ${client.lastName} - ${rating}‚≠ê`);

          } catch (error) {
            console.error(`   ‚ùå Erreur pour ${client.firstName} ${client.lastName}:`, error.message);
          }
        }

        // Mettre √† jour les statistiques de cette session
        await updateSessionAverageRating(session._id);
        console.log(`   üìä Statistiques mises √† jour pour la session`);
      }
    }

    console.log('\nüéâ Processus termin√© !');
    console.log(`‚úÖ ${sessionsCreated} sessions cr√©√©es`);
    console.log(`‚úÖ ${reviewsCreated} reviews cr√©√©es`);

  } catch (error) {
    console.error('‚ùå Erreur lors du processus:', error);
  } finally {
    await mongoose.connection.close();
    console.log('üîå Connexion MongoDB ferm√©e');
  }
}

// Fonction helper pour mettre √† jour les statistiques d'une session
async function updateSessionAverageRating(sessionId) {
  try {
    const avgRating = await Review.aggregate([
      { $match: { contentId: sessionId, contentType: 'session', status: 'approved' } },
      { $group: { _id: null, avgRating: { $avg: '$rating' }, count: { $sum: 1 } } }
    ]);

    const rating = avgRating[0]?.avgRating || 0;
    const reviewCount = avgRating[0]?.count || 0;

    await Session.findByIdAndUpdate(sessionId, {
      averageRating: rating,
      reviewCount: reviewCount
    });

    console.log(`     üìä Session mise √† jour: ${rating.toFixed(1)}‚≠ê (${reviewCount} avis)`);

  } catch (error) {
    console.error('‚ùå Erreur lors de la mise √† jour des statistiques de la session:', error);
  }
}

// Ex√©cuter le script si appel√© directement
if (require.main === module) {
  createTestSessionsWithReviews();
}

module.exports = { createTestSessionsWithReviews }; 