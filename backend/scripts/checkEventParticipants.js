const mongoose = require('mongoose');
const Event = require('../models/Event');

// Configuration de la base de donn√©es
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/holistic';

const checkEventParticipants = async () => {
  try {
    console.log('üîç Connexion √† la base de donn√©es...');
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Connexion r√©ussie');

    // Trouver un √©v√©nement avec des participants
    const event = await Event.findOne({ 'participants.0': { $exists: true } })
      .populate('participants.user', 'firstName lastName email');

    if (!event) {
      console.log('‚ùå Aucun √©v√©nement avec des participants trouv√©');
      return;
    }

    console.log(`\nüìã √âv√©nement: "${event.title}"`);
    console.log(`üìä Capacit√©: ${event.maxParticipants} places`);
    console.log(`üìä Participants: ${event.participants.length} inscriptions`);

    // Calculer les statistiques
    const confirmedParticipants = event.participants
      .filter(p => p.status === 'confirmed')
      .reduce((total, p) => total + (p.quantity || 1), 0);
    
    const pendingParticipants = event.participants
      .filter(p => p.status === 'pending')
      .reduce((total, p) => total + (p.quantity || 1), 0);
    
    const cancelledParticipants = event.participants
      .filter(p => p.status === 'cancelled')
      .reduce((total, p) => total + (p.quantity || 1), 0);

    console.log(`\nüìä Statistiques des places:`);
    console.log(`- Confirm√©es: ${confirmedParticipants} places`);
    console.log(`- En attente: ${pendingParticipants} places`);
    console.log(`- Annul√©es: ${cancelledParticipants} places`);
    console.log(`- Total occup√©es: ${confirmedParticipants + pendingParticipants} places`);
    console.log(`- Places restantes: ${event.maxParticipants - (confirmedParticipants + pendingParticipants)} places`);

    console.log(`\nüë• D√©tails des participants:`);
    event.participants.forEach((participant, index) => {
      const user = participant.user;
      console.log(`${index + 1}. ${user.firstName} ${user.lastName} (${user.email})`);
      console.log(`   - Statut: ${participant.status}`);
      console.log(`   - Quantit√©: ${participant.quantity || 1} place${participant.quantity > 1 ? 's' : ''}`);
      console.log(`   - Note: ${participant.note || 'Aucune'}`);
      console.log(`   - Inscrit le: ${new Date(participant.createdAt).toLocaleString('fr-FR')}`);
      console.log('');
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå D√©connexion de la base de donn√©es');
    process.exit(0);
  }
};

// Ex√©cuter le script
checkEventParticipants(); 