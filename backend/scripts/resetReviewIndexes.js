require('dotenv').config({ path: '../.env' });
const mongoose = require('mongoose');

async function resetReviewIndexes() {
  try {
    // Connexion √† MongoDB
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/holistic');
    console.log('‚úÖ Connect√© √† MongoDB');

    const db = mongoose.connection.db;
    
    // Option 1: Supprimer la collection (si elle est vide ou si vous voulez tout r√©initialiser)
    console.log('\nüîç V√©rification de la collection reviews...');
    const collections = await db.listCollections({ name: 'reviews' }).toArray();
    
    if (collections.length > 0) {
      const collection = db.collection('reviews');
      const count = await collection.countDocuments();
      console.log(`   Nombre de documents: ${count}`);
      
      if (count === 0) {
        console.log('üóëÔ∏è  Collection vide, suppression...');
        await db.dropCollection('reviews');
        console.log('‚úÖ Collection supprim√©e');
      } else {
        console.log('\n‚ö†Ô∏è  La collection contient des donn√©es.');
        console.log('   Option 1: Ex√©cutez "node fixReviewIndexes.js" pour corriger les index');
        console.log('   Option 2: Supprimez manuellement les donn√©es si vous voulez tout r√©initialiser');
        
        // Supprimer uniquement les index non-_id
        console.log('\nüóëÔ∏è  Suppression de tous les index (sauf _id)...');
        const indexes = await collection.listIndexes().toArray();
        
        for (const index of indexes) {
          if (index.name !== '_id_') {
            try {
              await collection.dropIndex(index.name);
              console.log(`   ‚úÖ Index ${index.name} supprim√©`);
            } catch (error) {
              console.error(`   ‚ùå Erreur lors de la suppression de ${index.name}:`, error.message);
            }
          }
        }
      }
    }
    
    // Forcer Mongoose √† recr√©er la collection avec les bons index
    console.log('\nüî® Cr√©ation de la collection avec les bons index...');
    
    // Charger le mod√®le Review
    require('../models/Review');
    const Review = mongoose.model('Review');
    
    // Cr√©er un document temporaire pour forcer la cr√©ation de la collection
    try {
      const tempReview = new Review({
        clientId: new mongoose.Types.ObjectId(),
        professionalId: new mongoose.Types.ObjectId(),
        contentType: 'product',
        contentId: new mongoose.Types.ObjectId(),
        contentTitle: 'Temp',
        rating: 5,
        comment: 'Temporary review for index creation',
        status: 'pending'
      });
      
      await tempReview.save();
      console.log('‚úÖ Document temporaire cr√©√©');
      
      // Supprimer imm√©diatement le document temporaire
      await Review.deleteOne({ _id: tempReview._id });
      console.log('‚úÖ Document temporaire supprim√©');
    } catch (error) {
      console.log('‚ö†Ô∏è  Impossible de cr√©er un document temporaire:', error.message);
    }
    
    // Lister les index finaux
    const finalCollection = db.collection('reviews');
    console.log('\nüìã Index finaux:');
    const finalIndexes = await finalCollection.listIndexes().toArray();
    finalIndexes.forEach(index => {
      console.log(`  - ${index.name}: ${JSON.stringify(index.key)}`);
    });
    
    console.log('\n‚úÖ R√©initialisation termin√©e');
    console.log('   Les index seront cr√©√©s automatiquement lors de la premi√®re insertion');
    
  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await mongoose.connection.close();
    console.log('\nüîå Connexion ferm√©e');
  }
}

// Ex√©cuter le script
resetReviewIndexes(); 