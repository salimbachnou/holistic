const mongoose = require('mongoose');
const Booking = require('../models/Booking');
const Session = require('../models/Session');
const Professional = require('../models/Professional');
const User = require('../models/User');

// Connect to MongoDB
mongoose.connect(process.env.MONGODB_URI || 'mongodb+srv://salimbachnou:sasaSASA13%40%40@cluster0.b01i0ev.mongodb.net/holistic?retryWrites=true&w=majority&appName=Cluster0/holistic')
  .then(() => console.log('MongoDB connected successfully'))
  .catch(err => console.error('MongoDB connection error:', err));

// Function to test the complete booking flow
const testBookingFlow = async () => {
  try {
    console.log('üöÄ Test du flux complet de r√©servation...');

    // 1. Trouver un professionnel
    const professional = await Professional.findOne().populate('userId');
    if (!professional) {
      console.log('‚ùå Aucun professionnel trouv√©');
      process.exit(1);
    }

    // 2. Trouver une session du professionnel
    const session = await Session.findOne({ 
      professionalId: professional._id,
      status: 'scheduled',
      startTime: { $gt: new Date() } // Session future
    });
    
    if (!session) {
      console.log('‚ùå Aucune session future trouv√©e pour ce professionnel');
      process.exit(1);
    }

    // 3. Trouver un utilisateur client
    const client = await User.findOne({ role: 'client' });
    if (!client) {
      console.log('‚ùå Aucun client trouv√©');
      process.exit(1);
    }

    console.log('‚úÖ Donn√©es trouv√©es:');
    console.log('  - Professionnel:', professional.businessName);
    console.log('  - Session:', session.title);
    console.log('  - Client:', `${client.firstName} ${client.lastName}`);
    console.log('  - Session participants:', session.participants?.length || 0, '/', session.maxParticipants);

    // 4. V√©rifier si la session peut √™tre r√©serv√©e
    console.log('\nüìã V√©rification de la session:');
    console.log('  - Status:', session.status);
    console.log('  - Est dans le pass√©:', session.isPast());
    console.log('  - Est pleine:', session.isFull);
    console.log('  - Peut √™tre r√©serv√©e:', session.canBeBooked());

    if (!session.canBeBooked()) {
      console.log('‚ùå La session ne peut pas √™tre r√©serv√©e');
      process.exit(1);
    }

    // 5. V√©rifier s'il y a d√©j√† une r√©servation pour ce client
    const existingBooking = await Booking.findOne({
      client: client._id,
      'service.sessionId': session._id
    });

    if (existingBooking) {
      console.log('‚ö†Ô∏è  Le client a d√©j√† r√©serv√© cette session');
      console.log('  - Booking ID:', existingBooking._id);
      console.log('  - Status:', existingBooking.status);
    } else {
      console.log('‚úÖ Aucune r√©servation existante trouv√©e');
    }

    // 6. Cr√©er une r√©servation de test
    console.log('\nüìù Cr√©ation d\'une r√©servation de test...');
    
    const bookingData = {
      client: client._id,
      professional: professional._id,
      service: {
        name: session.title,
        description: session.description,
        duration: session.duration,
        price: {
          amount: session.price,
          currency: 'MAD'
        },
        sessionId: session._id
      },
      appointmentDate: session.startTime,
      appointmentTime: {
        start: session.startTime.toISOString().substring(11, 16),
        end: new Date(session.startTime.getTime() + session.duration * 60000)
          .toISOString()
          .substring(11, 16)
      },
      location: {
        type: session.category === 'online' ? 'online' : 'in_person',
        address: session.category !== 'online' ? {
          street: session.location,
          city: professional.businessAddress?.city || 'Casablanca',
          postalCode: professional.businessAddress?.postalCode || '20000',
          country: professional.businessAddress?.country || 'Morocco'
        } : undefined,
        onlineLink: session.category === 'online' ? session.meetingLink : undefined
      },
      status: 'pending',
      paymentStatus: 'pending',
      totalAmount: {
        amount: session.price,
        currency: 'MAD'
      },
      clientNotes: 'R√©servation de test cr√©√©e automatiquement'
    };

    // G√©n√©rer le num√©ro de r√©servation
    const date = new Date();
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    
    const lastBooking = await Booking.findOne({
      bookingNumber: new RegExp(`^BK${year}${month}${day}`)
    }).sort({ bookingNumber: -1 });
    
    let sequence = 1;
    if (lastBooking) {
      const lastSequence = parseInt(lastBooking.bookingNumber.slice(-4));
      sequence = lastSequence + 1;
    }
    
    bookingData.bookingNumber = `BK${year}${month}${day}${String(sequence).padStart(4, '0')}`;

    const booking = new Booking(bookingData);
    await booking.save();

    console.log('‚úÖ R√©servation de test cr√©√©e avec succ√®s!');
    console.log('  - ID:', booking._id);
    console.log('  - Num√©ro:', booking.bookingNumber);
    console.log('  - Statut:', booking.status);
    console.log('  - Session:', session.title);
    console.log('  - Client:', `${client.firstName} ${client.lastName}`);

    // 7. V√©rifier que la r√©servation appara√Æt dans les demandes de la session
    console.log('\nüîç V√©rification des r√©servations pour la session...');
    
    const sessionBookings = await Booking.find({
      'service.sessionId': session._id
    }).populate('client', 'firstName lastName');

    console.log(`üìä R√©servations pour la session "${session.title}":`);
    sessionBookings.forEach((booking, index) => {
      console.log(`  ${index + 1}. ${booking.client.firstName} ${booking.client.lastName} - ${booking.status} (${booking.createdAt})`);
    });

    // 8. V√©rifier que le client a √©t√© ajout√© aux participants de la session
    console.log('\nüë• V√©rification des participants de la session...');
    
    const updatedSession = await Session.findById(session._id).populate('participants', 'firstName lastName');
    console.log(`Participants de la session (${updatedSession.participants.length}/${updatedSession.maxParticipants}):`);
    updatedSession.participants.forEach((participant, index) => {
      console.log(`  ${index + 1}. ${participant.firstName} ${participant.lastName}`);
    });

    // 9. Simuler la r√©cup√©ration des r√©servations par le professionnel
    console.log('\nüë®‚Äçüíº Simulation de la r√©cup√©ration par le professionnel...');
    
    const professionalBookings = await Booking.find({
      professional: professional._id,
      'service.sessionId': session._id
    }).populate('client', 'firstName lastName');

    console.log(`R√©servations trouv√©es par le professionnel: ${professionalBookings.length}`);
    professionalBookings.forEach((booking, index) => {
      console.log(`  ${index + 1}. ${booking.client.firstName} ${booking.client.lastName} - ${booking.status} (${booking.createdAt})`);
    });

    console.log('\n‚úÖ Test du flux de r√©servation termin√© avec succ√®s!');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Erreur lors du test du flux de r√©servation:', error);
    process.exit(1);
  }
};

// Ex√©cuter le script
testBookingFlow(); 