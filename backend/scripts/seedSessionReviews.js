const mongoose = require('mongoose');
const Session = require('../models/Session');
const Review = require('../models/Review');
const User = require('../models/User');
const Professional = require('../models/Professional');
const Booking = require('../models/Booking');

// Configuration de la base de donn√©es
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb+srv://salimbachnou:sasaSASA13%40%40@cluster0.b01i0ev.mongodb.net/holistic?retryWrites=true&w=majority&appName=Cluster0/holistic_app';

// Exemples de commentaires pour les reviews
const sampleComments = [
  "Excellente session ! J'ai beaucoup appris et le professionnel √©tait tr√®s comp√©tent.",
  "Session tr√®s enrichissante, je recommande vivement. L'ambiance √©tait parfaite.",
  "Bonne session dans l'ensemble, quelques points √† am√©liorer mais globalement satisfait.",
  "Session exceptionnelle ! D√©pass√© mes attentes. Tr√®s professionnel et √† l'√©coute.",
  "Tr√®s bonne exp√©rience, j'ai pu poser toutes mes questions et obtenir des r√©ponses claires.",
  "Session int√©ressante mais un peu courte √† mon go√ªt. Sinon tr√®s bien organis√©e.",
  "Parfait ! Exactement ce que je cherchais. Je reviendrai certainement.",
  "Session de qualit√© avec des conseils pratiques tr√®s utiles.",
  "Tr√®s satisfait de cette session. Le professionnel ma√Ætrise parfaitement son sujet.",
  "Bonne session, bien structur√©e et interactive. Je recommande."
];

async function seedSessionReviews() {
  try {
    console.log('üå± D√©marrage du seed des reviews de sessions...');
    
    // Connexion √† la base de donn√©es
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Connexion √† MongoDB √©tablie');

    // R√©cup√©rer toutes les sessions termin√©es
    const completedSessions = await Session.find({ status: 'completed' });
    console.log(`üìä Trouv√© ${completedSessions.length} sessions termin√©es`);

    if (completedSessions.length === 0) {
      console.log('‚ùå Aucune session termin√©e trouv√©e. Veuillez d\'abord cr√©er et terminer des sessions.');
      return;
    }

    // R√©cup√©rer tous les utilisateurs clients
    const clients = await User.find({ role: 'client' });
    console.log(`üë• Trouv√© ${clients.length} clients`);

    if (clients.length === 0) {
      console.log('‚ùå Aucun client trouv√©. Veuillez d\'abord cr√©er des comptes clients.');
      return;
    }

    let reviewsCreated = 0;
    let reviewsSkipped = 0;

    // Pour chaque session termin√©e, cr√©er quelques reviews
    for (const session of completedSessions) {
      console.log(`\nüéØ Traitement de la session: ${session.title}`);

      // G√©n√©rer entre 1 et 5 reviews par session
      const numberOfReviews = Math.floor(Math.random() * 5) + 1;
      console.log(`   üìù G√©n√©ration de ${numberOfReviews} reviews`);

      // M√©langer les clients et prendre les premiers
      const shuffledClients = clients.sort(() => 0.5 - Math.random());
      const selectedClients = shuffledClients.slice(0, numberOfReviews);

      for (const client of selectedClients) {
        try {
          // V√©rifier si une review existe d√©j√† pour ce client et cette session
          const existingReview = await Review.findOne({
            clientId: client._id,
            contentId: session._id,
            contentType: 'session'
          });

          if (existingReview) {
            console.log(`   ‚ö†Ô∏è  Review d√©j√† existante pour ${client.firstName} ${client.lastName}`);
            reviewsSkipped++;
            continue;
          }

          // Cr√©er une r√©servation confirm√©e pour ce client (si elle n'existe pas)
          let booking = await Booking.findOne({
            'service.sessionId': session._id,
            client: client._id
          });

          if (!booking) {
            booking = new Booking({
              client: client._id,
              professional: session.professionalId,
              service: {
                type: 'session',
                sessionId: session._id,
                title: session.title,
                date: session.startTime,
                duration: session.duration,
                price: session.price
              },
              status: 'completed',
              totalAmount: session.price,
              paymentStatus: 'completed',
              createdAt: new Date(session.startTime.getTime() - Math.random() * 7 * 24 * 60 * 60 * 1000) // Cr√©√© dans les 7 jours avant la session
            });
            await booking.save();
            console.log(`   ‚úÖ R√©servation cr√©√©e pour ${client.firstName} ${client.lastName}`);
          }

          // G√©n√©rer une note al√©atoire (biais√©e vers les bonnes notes)
          const ratings = [3, 4, 4, 4, 5, 5, 5, 5]; // Plus de 4 et 5 √©toiles
          const rating = ratings[Math.floor(Math.random() * ratings.length)];

          // Choisir un commentaire al√©atoire
          const comment = sampleComments[Math.floor(Math.random() * sampleComments.length)];

          // Cr√©er la review
          const review = new Review({
            clientId: client._id,
            professionalId: session.professionalId,
            contentId: session._id,
            contentType: 'session',
            contentTitle: session.title,
            rating: rating,
            comment: comment,
            status: 'approved',
            createdAt: new Date(session.startTime.getTime() + Math.random() * 7 * 24 * 60 * 60 * 1000) // Cr√©√© dans les 7 jours apr√®s la session
          });

          await review.save();
          reviewsCreated++;

          console.log(`   ‚úÖ Review cr√©√©e: ${client.firstName} ${client.lastName} - ${rating}‚≠ê`);

        } catch (error) {
          console.error(`   ‚ùå Erreur lors de la cr√©ation de la review pour ${client.firstName} ${client.lastName}:`, error.message);
        }
      }
    }

    // Mettre √† jour les statistiques des sessions
    console.log('\nüìä Mise √† jour des statistiques des sessions...');
    await updateAllSessionRatings();

    console.log('\nüéâ Seed termin√© !');
    console.log(`‚úÖ ${reviewsCreated} reviews cr√©√©es`);
    console.log(`‚ö†Ô∏è  ${reviewsSkipped} reviews ignor√©es (d√©j√† existantes)`);

  } catch (error) {
    console.error('‚ùå Erreur lors du seed:', error);
  } finally {
    await mongoose.connection.close();
    console.log('üîå Connexion MongoDB ferm√©e');
  }
}

// Fonction pour mettre √† jour les statistiques de toutes les sessions
async function updateAllSessionRatings() {
  try {
    const sessions = await Session.find({});
    
    for (const session of sessions) {
      await updateSessionAverageRating(session._id);
    }
    
    console.log('üìä Statistiques mises √† jour pour toutes les sessions');
  } catch (error) {
    console.error('‚ùå Erreur lors de la mise √† jour des statistiques:', error);
  }
}

// Fonction helper pour mettre √† jour les statistiques d'une session
async function updateSessionAverageRating(sessionId) {
  try {
    const avgRating = await Review.aggregate([
      { $match: { contentId: sessionId, contentType: 'session', status: 'approved' } },
      { $group: { _id: null, avgRating: { $avg: '$rating' }, count: { $sum: 1 } } }
    ]);

    const rating = avgRating[0]?.avgRating || 0;
    const reviewCount = avgRating[0]?.count || 0;

    await Session.findByIdAndUpdate(sessionId, {
      averageRating: rating,
      reviewCount: reviewCount
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de la mise √† jour des statistiques de la session:', error);
  }
}

// Ex√©cuter le script si appel√© directement
if (require.main === module) {
  seedSessionReviews();
}

module.exports = { seedSessionReviews, updateAllSessionRatings }; 